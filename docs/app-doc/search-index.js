var searchIndex = JSON.parse('{\
"islet_sdk":{"doc":"","t":"AAAAAAAAFNNNNNNLLLLFFFFEFFLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFNNNENNNNNNLLLLLLLLLNNECNCNCLLCLLLLFFCLLLCCDLLMLLLLLLLLMRFFF","n":["attester","c_api","config","error","prelude","report","sealing","verifier","attest","ISLET_ERROR_FEATURE_NOT_SUPPORTED","ISLET_ERROR_INPUT","ISLET_ERROR_WRONG_CLAIMS","ISLET_ERROR_WRONG_REPORT","ISLET_FAILURE","ISLET_SUCCESS","borrow","borrow_mut","from","into","islet_attest","islet_parse","islet_print_claims","islet_seal","islet_status_t","islet_unseal","islet_verify","try_from","try_into","type_id","CLAIM_COUNT_PLATFORM_TOKEN","CLAIM_COUNT_REALM_TOKEN","CLAIM_COUNT_SW_COMPONENT","STR_PLAT_CHALLENGE","STR_PLAT_CONFIGURATION","STR_PLAT_HASH_ALGO_ID","STR_PLAT_IMPLEMENTATION_ID","STR_PLAT_INSTANCE_ID","STR_PLAT_PROFILE","STR_PLAT_SECURITY_LIFECYCLE","STR_PLAT_SIGNATURE","STR_PLAT_SW_COMPONENTS","STR_PLAT_VERIFICATION_SERVICE","STR_REALM_CHALLENGE","STR_REALM_EXTENTIBLE_MEASUREMENTS","STR_REALM_HASH_ALGO_ID","STR_REALM_INITIAL_MEASUREMENT","STR_REALM_PERSONALIZATION_VALUE","STR_REALM_PUB_KEY","STR_REALM_PUB_KEY_HASH_ALGO_ID","STR_REALM_SIGNATURE","STR_USER_DATA","TAG_CCA_TOKEN","TAG_COSE_SIGN1","TAG_PLAT_CHALLENGE","TAG_PLAT_CONFIGURATION","TAG_PLAT_HASH_ALGO_ID","TAG_PLAT_IMPLEMENTATION_ID","TAG_PLAT_INSTANCE_ID","TAG_PLAT_PROFILE","TAG_PLAT_SECURITY_LIFECYCLE","TAG_PLAT_SW_COMPONENTS","TAG_PLAT_VERIFICATION_SERVICE","TAG_REALM_CHALLENGE","TAG_REALM_EXTENTIBLE_MEASUREMENTS","TAG_REALM_HASH_ALGO_ID","TAG_REALM_INITIAL_MEASUREMENT","TAG_REALM_PERSONALIZATION_VALUE","TAG_REALM_PUB_KEY","TAG_REALM_PUB_KEY_HASH_ALGO_ID","TAG_UNASSIGINED","TOKEN_COUNT","TOKEN_PLAT","TOKEN_REALM","to_label","CCAToken","Claims","Decoding","Error","InvalidArgument","NotSupported","Report","Sealing","SealingKey","Serialize","borrow","borrow_mut","fmt","from","from","into","try_from","try_into","type_id","Bool","Bstr","ClaimData","Error","Int64","Report","Text","attest","borrow","borrow_mut","config","default","fmt","from","into","parse","print_claims","seal","try_from","try_into","type_id","unseal","verify","Report","borrow","borrow_mut","buffer","deserialize","fmt","from","into","serialize","try_from","try_into","type_id","user_data","DEBUG_KEY","seal","unseal","verify"],"q":[[0,"islet_sdk"],[8,"islet_sdk::attester"],[9,"islet_sdk::c_api"],[29,"islet_sdk::config"],[74,"islet_sdk::error"],[93,"islet_sdk::prelude"],[116,"islet_sdk::report"],[129,"islet_sdk::sealing"],[132,"islet_sdk::verifier"],[133,"core::result"],[134,"core::ffi"],[135,"core::ffi"],[136,"core::fmt"],[137,"core::fmt"],[138,"core::fmt"],[139,"serde::de"],[140,"serde::ser"],[141,"alloc::vec"]],"d":["","","cbindgen:ignore","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get an attestation report(token).","Parse the claims with the given title and returns the …","Print all claims including Realm Token and Platform Token.","Seals the plaintext given into the binary slice","","Unseals into plaintext the sealed binary provided.","Verify the attestation report and returns attestation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,16,16,0,0,16,0,16,0,16,16,0,16,16,16,16,0,0,0,16,16,16,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[[[2,[1]]],[[5,[3,4]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[6,7,6,7],8],[[9,6,7,6,7],8],[[6,7]],[[6,7,6,7],8],0,[[6,7,6,7],8],[[6,7,6,7],8],[[],5],[[],5],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[11,12],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[4,13],14],[15,4],[[]],[[]],[[],5],[[],5],[[],10],0,0,0,0,0,0,0,0,[[]],[[]],0,[[],16],[[16,13],[[5,[17]]]],[[]],[[]],[[18,11],[[19,[16]]]],[18],0,[[],5],[[],5],[[],10],0,0,0,[[]],[[]],0,[20,[[5,[3]]]],[[3,13],14],[[]],[[]],[[3,21],5],[[],5],[[],5],[[],10],0,0,[[[2,[1]]],[[5,[[22,[1]],4]]]],[[[2,[1]]],[[5,[[22,[1]],4]]]],[3,[[5,[18,15]]]]],"c":[],"p":[[15,"u8"],[15,"slice"],[3,"Report",116],[4,"Error",74],[4,"Result",133],[6,"c_uchar",134],[6,"c_int",134],[4,"islet_status_t",9],[6,"c_char",134],[3,"TypeId",135],[15,"str"],[15,"u16"],[3,"Formatter",136],[6,"Result",136],[4,"TokenError",137],[4,"ClaimData",93],[3,"Error",136],[3,"AttestationClaims",137],[4,"Option",138],[8,"Deserializer",139],[8,"Serializer",140],[3,"Vec",141]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
